#!/usr/bin/python

""" Script to estimate initial values for CFD Simulations"""


def calc_reynolds_number(length: float, velocity: float, kinematic_viscosity: float, ):
    reynolds_number = length * velocity / kinematic_viscosity
    return reynolds_number


def calc_turb_intensity(reynolds_number: float):
    turb_coefficient = 0.16
    turb_intensity = turb_coefficient * reynolds_number
    return turb_intensity


def calc_turb_kinetic_energy(velocity: float, turb_intensity: float):
    turbulent_kinetic_energy = (3 / 2) * (velocity / turb_intensity) ** 2
    return turbulent_kinetic_energy


def calc_turb_length_scale(hydraulic_diameter: float):
    coefficient_for_pipe_flow = 0.07
    turbulent_length_scale = hydraulic_diameter * coefficient_for_pipe_flow
    return turbulent_length_scale


def calc_turb_dissipation_rate(turbulent_kinetic_energy: float, turbulent_length_scale: float):
    constant = 0.09
    epsilon = constant ** (3 / 4) * turbulent_kinetic_energy ** (3 / 2) / turbulent_length_scale
    return epsilon


def calc_specific_turb_dissipation_rate(turbulent_kinetic_energy: float, turbulent_length_scale: float):
    constant = 0.09
    omega = turbulent_kinetic_energy ** 0.5 / (constant ** (1 / 4) * turbulent_length_scale)
    return omega


def calc_turb_viscosity_epsilon(turb_kinetic_energy: float, turb_dissipation_rate: float):
    constant = 0.09
    turbulent_viscosity = constant * turb_kinetic_energy ** 2 / turb_dissipation_rate
    return turbulent_viscosity


def calc_turb_viscosity_omega(turb_kinetic_energy: float, specific_turb_dissipation_rate: float):
    turbulent_viscosity = turb_kinetic_energy / specific_turb_dissipation_rate
    return turbulent_viscosity


def get_input():
    # Prompt user for inputs
    hydraulic_diameter = float(input("Enter the hydraulic diameter (m): "))
    free_stream_velocity = float(input("Enter the free stream velocity (m/s): "))
    # Provide hints for kinematic viscosity
    print("Kinematic viscosity (m^2/s) is approximately 0.000001 for water and 0.0000148 for air")
    kinematic_viscosity = float(input("Enter the kinematic viscosity (m^2/s): "))
    return hydraulic_diameter, free_stream_velocity, kinematic_viscosity


if __name__ == "__main__":
    print('Beginning estimation of initial field and boundary values')
    hydraulic_diameter, free_stream_velocity, kinematic_viscosity = get_input()

    reynolds_number = calc_reynolds_number(hydraulic_diameter, free_stream_velocity, kinematic_viscosity)
    turb_intensity = calc_turb_intensity(reynolds_number)
    turb_kinetic_energy = calc_turb_kinetic_energy(free_stream_velocity, turb_intensity)
    turb_length_scale = calc_turb_length_scale(hydraulic_diameter)
    turb_dissipation_rate = calc_turb_dissipation_rate(turb_kinetic_energy, turb_length_scale)
    specific_turb_dissipation_rate = calc_specific_turb_dissipation_rate(turb_kinetic_energy, turb_length_scale)
    turb_viscosity_epsilon = calc_turb_viscosity_epsilon(turb_kinetic_energy, turb_dissipation_rate)
    turb_viscosity_omega = calc_turb_viscosity_omega(turb_kinetic_energy, specific_turb_dissipation_rate)

    print(f'Hydraulic diameter (D) = {hydraulic_diameter}')
    print(f'Free-stream velocity (U) = {free_stream_velocity}')
    print(f'Kinematic viscosity (ν)= {kinematic_viscosity}')
    print(f'Reynolds Number (Re) = {reynolds_number}')
    print(f'Turbulence intensity (I) = {turb_intensity}')
    print(f'Turbulence kinetic energy (k) = {turb_kinetic_energy}')
    print(f'Turbulence length scale (L) = {turb_length_scale}')
    print(f'Turbulence dissipation rate (ε / epsilon) = {turb_dissipation_rate}')
    print(f'Specific turbulence dissipation rate (ω / omega) = {specific_turb_dissipation_rate}')
    print(f'Turbulent viscosity for k-ε = {turb_viscosity_epsilon}')
    print(f'Turbulent viscosity for k-ω = {turb_viscosity_omega}')


