/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  www.openfoam.org
    \\  /    A nd           | Version:  User generated
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      functions;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

residuals
{
    type             residuals;                         // Type of function (mandatory)
    libs             ("libutilityFunctionObjects.so");  // Library to be used (mandatory)
    writeControl     timeStep;                          // What triggers write (optional)
    fields           (".*");                            // Fields to calculate (optional)
    enabled          false;                             // Make it active (optional)
}

CourantNo
{
    type             CourantNo;                       // Type of function (mandatory)
    libs             ("libfieldFunctionObjects.so");  // Library to be used (mandatory)
    writeControl     writeTime;                       // What triggers write (optional)
    enabled          true;                            // Make it active (optional)
}

yPlus
{
    type             yPlus;                           // Type of function (mandatory)
    libs             ("libfieldFunctionObjects.so");  // Library to be used (mandatory)
    writeControl     writeTime;                       // What triggers write (optional)
    enabled          true;                            // Make it active (optional)
}

totalPressure
{
    type      pressure;                // Mandatory entries (unmodifiable)
    libs      (fieldFunctionObjects);  // Mandatory entries (unmodifiable)
    mode      total;                   // Mandatory entry (runtime modifiable)
    p         p;                       // Kinematic pressure (required for incompressible flow)
    U         U;                       // Velocity field (required for incompressible flow)
    enabled   true;                    // Make it active (optional)
}

turbulenceFields  // Calcluate Turbulence length scale (L) & Turbulence Intensity (I)
{
    type             turbulenceFields;                // Type of function (mandatory)
    libs             ("libfieldFunctionObjects.so");  // Library to be used (mandatory)
    writeControl     writeTime;                       // What triggers write (optional)
    fields           (L I);                           // Fields to calculate (optional)
    enabled          false;                           // Make it active (optional)
}

forces
{
    type             forces;            // Type of function (mandatory)
    libs             ("libforces.so");  // Library to be used (mandatory)
    writeControl     writeTime;         // What triggers write (optional)
    log              true;              // Write to log? (optional)
    patches          ("propeller.*");   // Patches to be included
    rho              rhoInf;            // Indicates incompressible
    rhoInf           1;                 // Redundant for incompressible
    CofR             (0 0 0);           // Center of rotation
    pitchAxis        (0 0 1);           // Often set to the rotational axis
    enabled          false;             // Make it active (optional)
}


/* -------- Settings to automatically change the type of simulation -------- //

switchTime     2;
startTime      -1;
switchEnabled  false;

fileUpdateFvSchemes
{
    type               timeActivatedFileUpdate;
    libs               ("libutilityFunctionObjects.so");
    writeControl       timeStep;
    writeInterval      1;
    fileToUpdate       "$FOAM_CASE/system/fvSchemes";
    enabled            $switchEnabled;
    timeVsFile
    (
        ($startTime    "$FOAM_CASE/system/fvSchemes.steady")
        ($switchTime   "$FOAM_CASE/system/fvSchemes.transient")
    );
}

// --------- Settings to automatically execute external commands  ---------- //

systemCallExample
{
    type        systemCall;
    libs        ("libutilityFunctionObjects.so");
    executeCalls // Calls that will be run at every step of the simulation
    (
        "echo Running custom system calls on execution specified in system/function"
    );
    writeCalls  // Calls that will be run when writing data
    (
        "echo Running custom system calls on write specified in system/function"
    );
    endCalls  // Calls that will be run when the sim has ended
    (
        "echo Running custom system calls on execution specified in system/function"
    );
    enabled     false;  // Make it active (optional)
}

\*---------------------------------------------------------------------------*/
