#!/bin/bash

# Exit if 'constant' or 'system' directories are missing
[ -d "constant" ] || { echo "ERROR: 'constant' directory is missing."; exit 1; }
[ -d "system" ] || { echo "ERROR: 'system' directory is missing."; exit 1; }

# Grab the number of processors from decomposeParDict
NPROCS=$(foamDictionary -entry numberOfSubdomains -value system/decomposeParDict)

# Grab the application from controlDict
APP=$(foamDictionary -entry application -value system/controlDict)

# Grab the solver from controlDict
SOLVER=$(foamDictionary -entry solver -value system/controlDict)

# Print solver and processors to terminal
echo Running $APP with the $SOLVER solver on $NPROCS processors

# Decompose the domain for parallel computing
# -o = overwrites the existing log
decomposePar -force 2>&1 | tee log.decomposePar

# Renumber the mesh to speed up large simulations
mpirun -np $NPROCS renumberMesh -overwrite -parallel -noZero 2>&1 | tee log.$APP

# Move 0 files for processor folders
cp -r 0 processor*/*

# Override the 'constant' dir processor directories
foco overrideProcessorConstant

# Monitor the run using pyFoam
# pyFoamPlotRunner.py

# Run the detected solver in parallel
mpirun -np $NPROCS --rankfile system/rankfile $APP -solver $SOLVER -parallel 2>&1 | tee log.$APP

# Reconstruct latest timestep
reconstructPar -latestTime 2>&1 | tee log.reconstructPar

# Add dimensions to y+ and Courant number
foco addDimensions

# Plot the residuals and save the plot
foco plotResiduals
