#!/bin/bash

# ---------------------------- Start-up Checks ----------------------------- #

# Exit if 'constant' or 'system' directories are missing
[ -d "constant" ] || { echo "ERROR: 'constant' directory is missing."; exit 1; }
[ -d "system" ] || { echo "ERROR: 'system' directory is missing."; exit 1; }


# ---------------------------- Helper Functions ---------------------------- #

# When called, this method will modify the snappyHexMeshDict file to run the 
# castellated phase. It marks surfaces as baffle so that they get refined 
# without the "inner mesh" being cut out
prepareCastellatedMesh() {
    # Set the local systems directory
    local dict="system/snappyHexMeshDict"

    # Ensure there is no snapping to the surfaces
    foamDictionary $dict -entry snap -set false

    # Extract all surface names under refinementSurfaces
    surfaceNames=$(foamDictionary "$dict" -entry refinementSurfaces | grep '{' | awk '{print $1}')

    # Set the surfaces to baffles
    for surface in $surfaceNames; do
        echo "Setting $surface.patchInfo.type to baffle"
        foamDictionary "$dict" -entry "refinementSurfaces.$surface.patchInfo.type" -set "baffle"
    done
}

# When called, this method will modify the snappyHexMeshDict file to run the 
# snapping phase. It sets snapping to true and copies the refinement surface 
# patch types from the original file
prepareForSnapping() {
    # Set the local systems directory
    local SYS_DIR="$1"

    # Copy the original snappyHexMeshDict from the base direcotry
    cp "$SYS_DIR/snappyHexMeshDict" system/

    # Ensure there is snapping to the surfaces
    foamDictionary $dict -entry snap -set true
}


#------------------------------- Preparation ------------------------------- #

# Define names for AMR directories
RUN_NAME="amr_run"
REFINE_NAME="amr_refine"

# Remove any previous AMR directories
rm -rf "$RUN_NAME" "$REFINE_NAME"

# Create the directories for the AMR run
mkdir "$RUN_NAME"
mkdir "$REFINE_NAME"

# Establish the base and AMR paths
BASE_DIR=$(pwd)
SYS_DIR="$BASE_DIR/system"
CONST_DIR="$BASE_DIR/constant"
RUN_DIR="$BASE_DIR/$RUN_NAME"
REFINE_DIR="$BASE_DIR/$REFINE_NAME"

# Create the system and constant directories in the AMR folders
mkdir "$RUN_DIR/constant"
mkdir "$RUN_DIR/constant/triSurface"
mkdir "$RUN_DIR/system"
mkdir "$REFINE_DIR/constant"
mkdir "$REFINE_DIR/system"

# Copy the relevant files into the AMR refine folders
cp -r $CONST_DIR/* $REFINE_DIR/constant/
cp -r $SYS_DIR/* $REFINE_DIR/system/

# Copy the relevant files into the AMR run folders
cp -r $CONST_DIR/* $RUN_DIR/constant/
cp -r $SYS_DIR/* $RUN_DIR/system/

# Navigate into the AMR run directory
cd "$RUN_DIR"

# Extract the features of the geometry (for edge refinement in snappyHexMesh)
runApplication surfaceFeatureExtract

# Run blockMesh to create the base mesh for the wind tunnel
runApplication blockMesh

# Decompose the case to run on multiple processors
runApplication $decompDict decomposePar


#---------------------------- Castellation Step ---------------------------- #

# In the first step, the castellated mesh is generated (using the object to 
# refine locally). It's important not to cut the mesh so that only hexagonal 
# elements are present. These are required to carry out the refinement later. 
# The snappyHexMesh dictionary is prepared to run only the castellated phase.

# Modify snappyHexMesh for the castellation phase
prepareCastellatedMesh

# Run snappyHexMesh and checkMesh
runParallel $decompDict -s "castellated" snappyHexMesh -overwrite
runParallel $decompDict -s "castellated" checkMesh -writeFields '(nonOrthoAngle)' -constant

# Remove face zones
ls -d processor* | xargs -I {} rm -f {}/constant/polyMesh/faceZones

# Copy the castellated mesh to the refinement folder, where the refinement can
# be applied later on, after the first CFD loop has been run
cp -R processor* $REFINE_DIR
cp -R constant/polyMesh $REFINE_DIR/constant/polyMesh


#------------------------- Snapping and Simulating ------------------------- #

# After a copy of the mesh has been made, the snappyHexMesh dictionary is 
# prepared to run the snapping phase.

# Modify snappyHexMesh for the snapping phase
prepareForSnapping "$SYS_DIR"

# Run snappyHexMesh, checkMesh, and topoSet
runParallel $decompDict -s "snapped" snappyHexMesh -overwrite
runParallel $decompDict -s "snapped" checkMesh -writeFields '(nonOrthoAngle)' -constant
runParallel $decompDict topoSet

#- For parallel running: set the 0 folder
restore0Dir -processor

# Initialize the flow field using potentialFoam (makes it easier/faster for simpleFoam to converge)
runParallel $decompDict -s "beforeRefinement" potentialFoam -writephi

# Run simpleFoam (first CFD run)
runParallel $decompDict $(getApplication)


#----------------------- Store and Process Results ------------------------- #

# Copy the boundary conditions in the 0 folder to the refinement folder
ls -d processor* | xargs -I {} \
    cp -r 0.orig "$REFINE_DIR/"

# Set path to the refinement folder
cd "$REFINE_DIR"

# copy the decomposeParDict into the refinement folder
cp "$RUN_DIR/system/decomposeParDict" system/

# Clear the 0 folders inside the processor folders
ls -d processor* | xargs -I {} \
            rm -Rf ./{}/0

# Restore the 0 folder inside the processor folders
restore0Dir -processor

# Map the field data of the first CFD run (using the snapped mesh in the primal run folder) on the stored castellated mesh (in the primal refinement folder)
runParallel $decompDict -s "refinement" mapFieldsPar -sourceTime 'latestTime' \
    -fields '(p U k nut omega)' ../primal_run


# calculate the refVal field for refinement (see system/preProcess file)
# preProcess will create a new field called "refVal" which is then used as the basis for refinement (see primalRefinement/system/preProcess)
runParallel -s "refVal" $decompDict pimpleFoam -postProcess \
    -dict system/preProcess -latestTime


# Run the actual refinement through pimpleFoam (which will use the primalRefinement/constant/dynamicMeshDict file).
# So do change the limits for lower & upper refinement values for refVal in that file
runParallel $decompDict pimpleFoam

# Array declaration of the mesh fields that will be copied later on
declare -a polyMeshFields=("boundary" "cellLevel" "cellZones" "faces" "faceZones" "level0Edge" "neighbour" "owner" "pointLevel" "points" "pointZones")

# pimpleFoam creates a new time folder 1 that contains the refined mesh.
# So within each processor folder, we need to copy the refined mesh from the time folder [1] to the constant/polymesh folder
# Then the header location in the header files needs to be modified
for file in "${polyMeshFields[@]}"
do
    ls -d processor* | xargs -I {} \
        cp -rf ./{}/1/polyMesh/$file \
        ./{}/constant/polyMesh/
    ls -d processor* | xargs -I {} \
        sed -i "s/1\/polyMesh/constant\/polyMesh/g" \
        ./{}/constant/polyMesh/$file
done


# remove refinementHistory
ls -d processor* | xargs -I {} \
    rm -Rf ./{}/0/polyMesh/refinementHistory


# remove data from the initial CFD run in primalRun
rm -Rf ../primal_run/processor*


# create processorN/constant/polyMesh directories
ls -d processor* | xargs -I {} \
    mkdir -p ../primal_run/{}/constant/polyMesh


# copy the refined mesh from primal refinement to primal_run.
# Later on, the snapping process can be executed on that mesh.
ls -d processor* | xargs -I {} \
                cp -R ./{}/constant/polyMesh \
                ../primal_run/{}/constant


# Set the path to the primal_run directory
cd ../primal_run


# Change the path location in the header files
for file in "${polyMeshFields[@]}"
do
ls -d processor* | xargs -I {} \
    sed -i "s/0\/polyMesh/constant\/polyMesh/g" \
    ./{}/constant/polyMesh/$file
done

# Run the snapping phase on the refined castellated mesh in the primal_run folder
runParallel $decompDict -s "AfterRefinement" snappyHexMesh -overwrite
runParallel $decompDict -s "AfterRefinement" topoSet


# Restore the 0 folder
restore0Dir -processor


# Initialize the simulation using potentialFoam
runParallel $decompDict -s "AfterRefinement" potentialFoam -writephi


# Check the mesh
runParallel $decompDict -s "AfterRefinement" checkMesh -writeFields '(nonOrthoAngle)' -constant


# Run the second CFD phase (using the refined, snapped mesh)
runParallel $decompDict -s "AfterRefinement" $(getApplication)


# Reconstruct the case
runApplication reconstructParMesh -constant
runApplication reconstructPar -latestTime


# Create a dummy foam.foam file for processing in Paraview
touch foam.foam


#------------------------------------------------------------------------------
