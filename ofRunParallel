#!/bin/bash

# Grab the number of processors from decomposeParDict
NPROCS=$(foamDictionary -entry numberOfSubdomains -value system/decomposeParDict)

# Grab the application from controlDict
APP=$(foamDictionary -entry application -value system/controlDict)

# Grab the solver from controlDict
SOLVER=$(foamDictionary -entry solver -value system/controlDict)

# Print solver and processors to terminal
echo Running $APP with the $SOLVER solver on $NPROCS processors

# Remove previous time steps
ofDeleteTimeSteps.py

# Decompose the domain for parallel computing
# -o = overwrites the existing log
decomposePar -force 2>&1 | tee log.decomposePar

# Move 0 files for processor folders
cp -r 0 processor*/*

# Override the 'constant' dir processor directories
ofOverrideProcessorConstant.py

# Monitor the run using pyFoam
# pyFoamPlotRunner.py

# Run the detected solver in parallel
mpirun -np $NPROCS --rankfile system/rankfile $APP -solver $SOLVER -parallel 2>&1 | tee log.$APP

# Reconstruct latest timestep
reconstructPar -latestTime 2>&1 | tee log.reconstructPar

# Add dimensions to y+ and Courant number
ofAddDimensions.py

# Plot the residuals and save the plot
ofPlotResiduals.py
